1+2 # 이 뒤 부터는 주석이 된다.
# 위 코드는 1+2를 연산만 하고 출력하지 않음
print(1+2) # 연산 결과를 출력 -> print 이용

# () 소괄호
# {} 중괄호
# [] 대괄호 
'''
    주석  (Comment)
       1. 소스에 설명을 추가하는 것.
       2. 실행 시 무시된다.
       3. 한 줄 주석 #
       4. 여러 줄 주석 
       작은따옴표나 큰 따옴표 3개로 묶는다.
       5. 코드에 주석을 잘 다는 습관을 들이자!.

    print() 함수
       1. 화면(IDLE)으로 데이터를 출력하는 함수.
         > 함수 : 특정 행위를 하기 위해 만들어 놓은 기능
           function(기능) --> f(x) = ~~~~
       2. 대화형 인터프리터 편집기(IDLE)에서는
           사용 하지 않아도 된다.

    문자열
       - 문자의 나열
       - 문자열을 만드려면 "안녕" 이나 '안녕'처럼
         큰따옴표 또는 작은 따옴표로 묶는다.

[대화형에서 해본 결과]
>>> "문자열"
'문자열'
>>> print("문자열")
문자열
>>> a = "korea"
>>> b = "japan"
>>> a,b
('korea', 'japan')
>>> print (a,b)
korea japan
>>> a+b
'koreajapan'
>>> print(a+b)
koreajapan
>>> print(a b)
SyntaxError: invalid syntax 
'''

# 여러 값 출력의 기본은 , 로 나열한다.
print(1,2,3,4,5)
# 세미콜론(;)으로 두 줄의 코드를 한줄로 합칠 수 있다.
print(1,2,3);print(4,5,6)
# 결과가 1 2 3 4 5 6 이렇게 나올까?

'''
    print() 함수에서 기본 구분 기호 와 기본 마지막 기호
       1. , 로 나열할 때 값의 기본 구분 기호는 공백!
            > sep = ' '
       2. print()의 출력이 끝나면 기본으로 개행(줄바꿈)
            > end = '\n'
            > \n 은 개행을 하는 특수한 문자 -> 이스케이프 문자
              (new line)
       > 입맛대로 변경이 가능하다!       
'''
print(1,2,3,sep="") # 구분기호를 빈 문자열로 지정 
print(1,2,3,sep="하하호호")
print("안녕",end="") # 마지막기호(개행)을 빈 문자열로 지정
print("하세요",end="파이썬")

print() # 아무것도 출력하지 말고 줄바꿈을 해라
# 아래 두 코드는 완벽하게 동일한 코드
print("파이썬", "python") # 아래 sep, end가 기본값이다.(생략)
print("파이썬", "python", sep = " ", end = "\n")

print("==========================") # 단지 구분하기 위한 출력

# print() 에서 + (덧셈기호) 의 용도
print(1+2) # 숫자+숫자 ==> 덧셈 (연산)
print( "문자열" + "나도 문자열!" ) # 문자열 + 문자열 ==> 연결
print( "문자열2"      "문자열3") # 문자열끼리는 기호 없이도 연결

#print(1 + "2") # 숫자 + 문자열 ==> 오류
#print(1 "2")# 숫자 (공백) 문자열 ==> 오류 (실행도 안 됨)
# 문법적으로 맞지 않다!!!

'''
    변수
      1. 자료(값)을 저장하는 공간
      2. 파이썬에서 변수는 '객체'를 가리킨다.
'''
print("==========================")

# 변수에 값 대입 (1) - 하나씩
a = 1
b = 2
c = 3
print(a, b, c)

# 변수에 값 대입 (2) - 한번에 순서대로 대입
a, b, c = 4, 5, 6
print(a, b, c)

# 변수에 값 대입 (3) - 한번에 모두 같은 값
a = b = c = 7
print(a, b, c)

# 변수에 값 대입 (4) - 1번과 동일 
a = 8; b = 9; c = 10
print(a, b, c)
#a = 8 b = 9 c = 10 --> 난해하다..

# 변수끼리 값 교체
a, b = b, a
print(a, b, c)

a, b, c = c, a, b
print(a, b, c)

# 변수가 값을 가르킨다?
a = 3
b = 3
print( id(3) ) #id() : id 값을 출력
print( id(a) )
print( id(b) )

# 가리킨다 -> 참조한다
# 참조하고 있는 값의 개수를 확인하기
import sys # sys 라는 '모듈'을 사용하겠다!
print("처음 2018 숫자 :", sys.getrefcount(2018))
# get : 구하겠다.
# ref : reference 참조
# count : 개수
# 2018 이라는 숫자를 참조하는 (가리키는) 개수를 구하겠다!

a = 2018
print("a에 대입 후 :", sys.getrefcount(2018))

b = 2018
print("b에 대입 후 :", sys.getrefcount(2018))

del(a) #delete : 변수를 제거하겠다!
del(b)
print("a,b 제거 후 :", sys.getrefcount(2018))
# 바로 숫자가 줄어들지 않을 수도 있다. (시간차)

# print(a) # 지워진 변수 사용불가.


'''
    변수명 규칙
      1. 한글 가능 --> 하지만, 영문으로 합시다.
      2. 특수문자는 _(언더바)만 사용 
      3. 숫자 가능 --> 첫 글자로는 안된다.
      4. 대소문자 구분 (변수명에만 해당되는게 아님)
        >> 별표 100개!!! 모든 프로그래밍 언어 공통
      5. 예약어 사용 불가 ( 색깔있는 글자 사용 불가)  
'''

print("재밌는 파이썬!")
print = "정말요??"
# print("네~~~") # print가 변수가 되었다. 기능 사용 불가
del(print)
print("네~~~")

# 예약어 목록 확인
import keyword
print(keyword.kwlist)



































